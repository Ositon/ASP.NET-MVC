@* @model MyfirstWeb.Models.Movie
    <!DOCTYPE html>

    <html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>@Model.Title</title>
    </head>
    <body>
        The movie <b>@Model.Title</b> was released @Model.ReleaseDate.ToLongDateString()
    </body>
    </html>
*@

@*-----------------Codificación HTML----------------*@
@{
    //var helloWorld = "<b>Hello, world!</b>";
}
@*<p>@helloWorld</p>
    <p>@Html.Raw(helloWorld)</p>*@

@*@------------------Expresiones explícitas-----------*@
@{
    //var name = "John Doe";
}
@*Hello, @(name.Substring(0, 4)). Your age is: <b>@(37 + 5).</b>
    @*-------------Bloques multi-estatutos de Razor----------*@

@{
    /*var sum = 32 + 10;
    var greeting = "Hello, world!";
    var text = "";
    for (int i = 0; i < 3; i++)
    {
        text += greeting + " The result is: " + sum + "\n";
    }
}
<h2>CodeBlocks</h2>
Text: @text

@*------------Etiquetas HTML in texto plano dentro de bloques de código--------*@
@{
    var helloWorld2 = "\nThis is a code block...";


    @:This is plain text!
    <br>
    <br>
    <text>This is plain text as well, and we can
        even span multiple lines, if needed!</text>
}
@*---------------Comentarios del lado del servidor con Razor-----------*@
@{
    @*
        Here's a Razor server-side comment
    *@

    // C# style single-line comment

    /*
    C# style multiline comment
    It can span multiple lines
    */
}
@*------------------Variables----------------------------
    @{
        /*string helloWorldMsg = "Good day";
        if (DateTime.Now.Hour > 17)
        {
            helloWorldMsg = "Good evening";
        }
        helloWorldMsg += ", world!";
        helloWorldMsg = helloWorldMsg.ToUpper();
    }
    <div>
        @helloWorldMsg
    </div>
    @*-------------------------IF---ELSE    --------------------------
    @if (DateTime.Now.Year >= 2042)
    {
        <span>The year 2042 has finally arrived!</span>
    }
    else
    {
        <span>We're still waiting for the year of 2042...</span>
    }
    @*-------------------La Funte de datos------------------------
    @{
        List<string> names = new List<string>()
    {
            "John Doe",
            "Jane Doe",
            "Joe Doe",
            "Jenna Doe",
            "Doggy Doe"
        };
    }
    <ul>
        @for (int i = 0; i < names.Count; i++)
        {
            <li>@names[i]</li>
        }
    </ul>
    <ul>
        @foreach (string name2 in names)
        {
            <li>@name2</li>
        }
    </ul>
    <ul>
        @{
            int counter = 0;
        }
        @while (counter < names.Count)
        {
            <li>@names[counter++]</li>
        }
    </ul>
    <ul>
        @{
            counter = 0;
        }
        @do
        {
            <li>@names[counter++]</li>
        } while (counter < names.Count);
    </ul>
    <ul>
        @for (int i = 0; i < names.Count; i++)
        {
            <li>@names[i]</li>

            @if (i >= 2)
            {
                <li>...and so on</li>

                break;
            }
        }
    </ul>> *@
@*_____________________Agregar un Partial view_____________________
    @{
        ViewData["Title"] = "Index";
    }

    <h2>Index</h2>

    @await Html.PartialAsync("_Greeting")

    <span>More stuff here....</span>

    @*_______________Pasando datos a las vistas parciales____________
    @for (int i = 0; i < 3; i++)
    {
        @await Html.PartialAsync("_Greeting", Model, new ViewDataDictionary(ViewData) { { "index", i } })
    }

@*____________________Archivos Layout_________________________*@
       @{
            Layout = "~/Views/Shared/_Layout.cshtml";
        }

        <p>Hello, world!</p>

    @{
        ViewData["Title"] = "Index";
    }
    @section Footer {
        Hello from the Index pageeeee!
    }
    <h1>Index</h1>
